{"version":3,"sources":["../../src/utils/math.ts"],"sourcesContent":["import type { AngleRange } from '../interfaces.js'\n\nexport function distance(\n\tx1: number,\n\ty1: number,\n\tx2: number,\n\ty2: number,\n): number {\n\treturn Math.sqrt(\n\t\tMath.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2),\n\t)\n}\n\nexport function inAngleRanges(\n\tx1: number,\n\ty1: number,\n\tx2: number,\n\ty2: number,\n\tangleRanges: AngleRange[] | undefined,\n): boolean {\n\tif (!angleRanges) {\n\t\treturn false\n\t}\n\n\tconst angle = (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI + 180\n\n\tfor (let i = 0; i < angleRanges.length; ++i) {\n\t\tconst ar = angleRanges[i]\n\t\tif (\n\t\t\tar &&\n\t\t\t(ar.start == null || angle >= ar.start) &&\n\t\t\t(ar.end == null || angle <= ar.end)\n\t\t) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"],"names":["distance","x1","y1","x2","y2","Math","sqrt","pow","abs","inAngleRanges","angleRanges","angle","atan2","PI","i","length","ar","start","end"],"mappings":"AAEA,OAAO,SAASA,SACfC,EAAU,EACVC,EAAU,EACVC,EAAU,EACVC,EAAU,EACD;IACT,OAAOC,KAAKC,IAAI,CACfD,KAAKE,GAAG,CAACF,KAAKG,GAAG,CAACL,KAAKF,KAAK,KAAKI,KAAKE,GAAG,CAACF,KAAKG,GAAG,CAACJ,KAAKF,KAAK;AAE/D,CAAC;AAED,OAAO,SAASO,cACfR,EAAU,EACVC,EAAU,EACVC,EAAU,EACVC,EAAU,EACVM,WAAqC,EAC3B;IACV,IAAI,CAACA,aAAa;QACjB,OAAO,KAAK;IACb,CAAC;IAED,MAAMC,QAAQ,AAACN,KAAKO,KAAK,CAACR,KAAKF,IAAIC,KAAKF,MAAM,MAAOI,KAAKQ,EAAE,GAAG;IAE/D,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,YAAYK,MAAM,EAAE,EAAED,EAAG;QAC5C,MAAME,KAAKN,WAAW,CAACI,EAAE;QACzB,IACCE,MACCA,CAAAA,GAAGC,KAAK,IAAI,IAAI,IAAIN,SAASK,GAAGC,KAAK,AAAD,KACpCD,CAAAA,GAAGE,GAAG,IAAI,IAAI,IAAIP,SAASK,GAAGE,GAAG,AAAD,GAChC;YACD,OAAO,IAAI;QACZ,CAAC;IACF;IAEA,OAAO,KAAK;AACb,CAAC"}